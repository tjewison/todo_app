require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TaskEntriesController do

  # This should return the minimal set of attributes required to create a valid
  # TaskEntry. As you add validations to TaskEntry, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for :task_entry }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TaskEntriesController. Be sure to keep this updated too.
  let(:valid_session) { }

  describe "GET index" do
    it "assigns all task_entries as @task_entries" do
      task_entry = TaskEntry.create! valid_attributes
      get :index, {format: :json}, valid_session
      assigns(:task_entries).should eq([task_entry])
    end
  end

  describe "GET show" do
    it "assigns the requested task_entry as @task_entry" do
      task_entry = TaskEntry.create! valid_attributes
      get :show, {:id => task_entry.to_param, format: :json}, valid_session
      assigns(:task_entry).should eq(task_entry)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TaskEntry" do
        expect {
          post :create, {:task_entry => valid_attributes, format: :json}, valid_session
        }.to change(TaskEntry, :count).by(1)
      end

      it "assigns a newly created task_entry as @task_entry" do
        post :create, {:task_entry => valid_attributes, format: :json}, valid_session
        assigns(:task_entry).should be_a(TaskEntry)
        assigns(:task_entry).should be_persisted
      end

    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved task_entry as @task_entry" do
        # Trigger the behavior that occurs when invalid params are submitted
        TaskEntry.any_instance.stub(:save).and_return(false)
        post :create, {:task_entry => { "description" => "invalid value" },format: :json}, valid_session
        assigns(:task_entry).should be_a_new(TaskEntry)
      end

      it "should not be successful" do
        # Trigger the behavior that occurs when invalid params are submitted
        TaskEntry.any_instance.stub(:save).and_return(false)
        post :create, {:task_entry => { "description" => "invalid value" }, format: :json}, valid_session
        response.should_not be_success
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested task_entry" do
        task_entry = TaskEntry.create! valid_attributes
        # Assuming there are no other task_entries in the database, this
        # specifies that the TaskEntry created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        TaskEntry.any_instance.should_receive(:update).with({ "description" => "MyText" })
        put :update, {:id => task_entry.to_param, :task_entry => { "description" => "MyText" }, format: :json}, valid_session
      end

      it "assigns the requested task_entry as @task_entry" do
        task_entry = TaskEntry.create! valid_attributes
        put :update, {:id => task_entry.to_param, :task_entry => valid_attributes, format: :json}, valid_session
        assigns(:task_entry).should eq(task_entry)
      end

      it "redirects to the task_entry" do
        task_entry = TaskEntry.create! valid_attributes
        put :update, {:id => task_entry.to_param, :task_entry => valid_attributes, format: :json}, valid_session
        response.should be_success
      end
    end

    describe "with invalid params" do
      it "assigns the task_entry as @task_entry" do
        task_entry = TaskEntry.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TaskEntry.any_instance.stub(:save).and_return(false)
        put :update, {:id => task_entry.to_param, :task_entry => { "description" => "invalid value" }, format: :json}, valid_session
        assigns(:task_entry).should eq(task_entry)
      end

      it "should be unsuccesful" do
        task_entry = TaskEntry.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TaskEntry.any_instance.stub(:save).and_return(false)
        put :update, {:id => task_entry.to_param, :task_entry => { "description" => "invalid value" }, format: :json}, valid_session
        response.should_not be_success
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested task_entry" do
      task_entry = TaskEntry.create! valid_attributes
      expect {
        delete :destroy, {:id => task_entry.to_param, format: :json}, valid_session
      }.to change(TaskEntry, :count).by(-1)
    end

  end

end
